snippet odspts
	select
		MP.EMPI,
		OP.MDM_PATIENT_ID,
		MP.HUP_MRN,
		MP.PMC_MRN,
		MP.PAH_MRN,
		MP.PATIENT_FNAME,
		MP.PATIENT_LNAME,
		MP.BIRTH_DATE,
		E.ENC_DATE,
		E.ENC_DISCHARGE_DATE,
		E.VISIT_NUMBER_NUM
	from
		MDM.PATIENT MP
		inner join ODS.PATIENT OP
			on MP.PK_PATIENT_ID = OP.MDM_PATIENT_ID
			and OP.SOURCE_CODE = 'SCM'
		inner join ODS.ENCOUNTER E
			on OP.PK_PATIENT_ID = E.FK_PATIENT_ID
			and E.SOURCE_CODE = 'SCM'
	where MP.HUP_MRN in (${0:MRN})
	;

snippet odsrecipients
	with PTS as
	(
	select
	  PK_PATIENT_ID
	, PATIENT_NAME
	, MRN_HUP
	, MRN_HUP_CHAR
	, TXP_ORGAN
	, BIRTH_DATE
	, DECEASED_DATE
	, FISCAL_YR_TXP
	, FISCAL_QTR_TXP
	, TXP_SCHEDULE_DATE
	from
	  TRANSPLANT.TXP_ENCOUNTERS_TXP_PROCEDURES
	where TXP_ORGAN = 'Kidney'
	)
	select distinct
	  PK_PATIENT_ID
	, PATIENT_NAME
	, MRN_HUP
	, MRN_HUP_CHAR
	, TXP_ORGAN
	, BIRTH_DATE
	, DECEASED_DATE
	, FISCAL_YR_TXP
	, FISCAL_QTR_TXP
	, TXP_SCHEDULE_DATE
	from
		PTS
	order by
		PATIENT_NAME
	;

snippet recipients
	with PTS as
	(
	select
		PATIENT.PAT_ID
	, PATIENT.PAT_NAME
	, IDENTITY_ID.IDENTITY_ID as MRN
	, TRANSPLANT_INFO.SUMMARY_BLOCK_ID
	, ZC_TX_CLASS.NAME as TXP_ORGAN
	, TRANSPLANT_INFO.TX_IS_HISTORIC_YN as TRANSPLANTED_ELSEWHERE_YN
	, cast(PATIENT.BIRTH_DATE as DATE) as BIRTH_DATE
	, PATIENT.DEATH_DATE
	, case
			when PATIENT.PAT_STATUS_C = 1 or (PATIENT.PAT_STATUS_C is null and PATIENT.DEATH_DATE is null)
			then 0
			when PATIENT.PAT_STATUS_C = 2 or (PATIENT.PAT_STATUS_C is null and PATIENT.DEATH_DATE is not null)
			then 1
		end as DECEASED_YN
	, dense_rank() over (partition by IDENTITY_ID.IDENTITY_ID
			order by TRANSPLANT_INFO.SUMMARY_BLOCK_ID)      as EPISODE_SEQUENCE
	, cast(TRANSPLANT_INFO.TXP_CALC_ADMIT_DATE as date) as INDEX_ADMISSION_DATE
	, cast(TRANSPLANT_INFO.TX_SURG_DT as date)          as TRANSPLANT_DATE
	, ORGAN.ANASTOMOSIS_ST_DTTM                         as ANASTOMOSIS_TIME
	, cast(TRANSPLANT_INFO.TXP_CALC_DISCHRG_DT as date) as INDEX_DISCHARGE_DATE
	, cast(TRANSPLANT_INFO.TXP_CALC_RFL_DATE as date)   as REFERRAL_DATE
	, cast(TRANSPLANT_INFO.TXP_CALC_EVAL_DATE as date)  as EVAL_START_DATE
	, cast(TRANSPLANT_INFO.TX_WAITLIST_DT as date)      as WAITLIST_DATE
	, case
			when TRANSPLANT_INFO.TXP_CALC_EVAL_DATE is not null
			then (
				case
					when ZC_TX_CURRENT_STAG.NAME = 'Evaluation' and ZC_TX_STAT_OUT.NAME = 'Ineligible'
					then cast(TRANSPLANT_INFO.TX_CURRENT_STAGE_DT as DATE)
					when ZC_TX_CURRENT_STAG.NAME = 'Evaluation' and ZC_TX_STAT_OUT.NAME = 'Active'
					then null
					when ZC_TX_CURRENT_STAG.NAME in ('Waitlist', 'Transplanted') and TRANSPLANT_INFO.TX_WAITLIST_DT is not null
					then cast(TRANSPLANT_INFO.TX_WAITLIST_DT as DATE)
					when ZC_TX_CURRENT_STAG.NAME = 'Transplanted' and TRANSPLANT_INFO.TX_WAITLIST_DT is null
					then cast(TRANSPLANT_INFO.TX_SURG_DT as DATE)
					when PATIENT.DEATH_DATE is not null
					then cast(PATIENT.DEATH_DATE as DATE)
				end 
			)
			else null
		end as EVAL_END_DATE
	, ZC_TX_CURRENT_STAG.NAME                           as CURRENT_PHASE
	, cast(TRANSPLANT_INFO.TX_CURRENT_STAGE_DT as DATE) as CURRENT_PHASE_DATE
	, ZC_TX_STAT_OUT.NAME                               as CURRENT_STATUS
	, ZC_TX_CURRENT_REAS.NAME                           as CURRENT_PHASE_REASON
	from
		PATIENT
		inner join IDENTITY_ID
			on PATIENT.PAT_ID = IDENTITY_ID.PAT_ID
		inner join TRANSPLANT_INFO
			on TRANSPLANT_INFO.PAT_ID = IDENTITY_ID.PAT_ID
		inner join TRANSPLANT_CLASS
			on TRANSPLANT_INFO.SUMMARY_BLOCK_ID = TRANSPLANT_CLASS.SUMMARY_BLOCK_ID
		inner join ZC_TX_CLASS
			on TRANSPLANT_CLASS.TX_CLASS_C = ZC_TX_CLASS.TX_CLASS_C
		left join ZC_TX_CURRENT_STAG
			on ZC_TX_CURRENT_STAG.TX_CURRENT_STAG_C = TRANSPLANT_INFO.TX_CURRENT_STAGE_C
		left join ZC_TX_CURRENT_REAS
			on ZC_TX_CURRENT_REAS.TX_CURRENT_REAS_C = TRANSPLANT_INFO.TX_CURRENT_REASON_C
		left join ZC_TX_STAT_OUT
			on ZC_TX_STAT_OUT.TX_STAT_OUT_C = TRANSPLANT_INFO.TX_CURRENT_STATUS_C
		left join TRANSPLANT_ORGANS
			on TRANSPLANT_ORGANS.SUMMARY_BLOCK_ID = TRANSPLANT_INFO.SUMMARY_BLOCK_ID
		left join ORGAN
			on ORGAN.ORG_RECORD_ID = TRANSPLANT_ORGANS.TX_ORG_ID
	where TRANSPLANT_INFO.EPISODE_STATUS_C <>  3 -- not deleted
		and IDENTITY_ID.IDENTITY_TYPE_ID = 100     -- HUP
		and TRANSPLANT_INFO.TX_EPSD_TYPE_C = 2     -- Recipient
		and ZC_TX_CLASS.NAME = 'Kidney'
	)
	select distinct
		SUMMARY_BLOCK_ID
	, TXP_ORGAN
	, PAT_ID
	, PAT_NAME
	, MRN
	, BIRTH_DATE
	, DEATH_DATE
	, DECEASED_YN
	, EPISODE_SEQUENCE
	, TRANSPLANT_DATE
	, ANASTOMOSIS_TIME
	, REFERRAL_DATE
	, EVAL_START_DATE
	, EVAL_END_DATE
	, WAITLIST_DATE
	, CURRENT_PHASE
	, CURRENT_PHASE_DATE
	, CURRENT_STATUS
	, CURRENT_PHASE_REASON
	from
		PTS
	order by
		PAT_NAME
	, EPISODE_SEQUENCE
	;

snippet donors
	with PTS as
	(
	select
		PATIENT.PAT_ID
	, PATIENT.PAT_NAME
	, IDENTITY_ID.IDENTITY_ID as MRN
	, TRANSPLANT_INFO.SUMMARY_BLOCK_ID
	, ZC_TX_CLASS.NAME as TXP_ORGAN
	, TRANSPLANT_INFO.TX_IS_HISTORIC_YN as TRANSPLANTED_ELSEWHERE_YN
	, PATIENT.BIRTH_DATE
	, PATIENT.DEATH_DATE
	, case
			when PATIENT.PAT_STATUS_C = 1 or (PATIENT.PAT_STATUS_C is null and PATIENT.DEATH_DATE is null)
			then 0
			when PATIENT.PAT_STATUS_C = 2 or (PATIENT.PAT_STATUS_C is null and PATIENT.DEATH_DATE is not null)
			then 1
		end as DECEASED_YN
	, dense_rank() over (partition by IDENTITY_ID.IDENTITY_ID
			order by TRANSPLANT_INFO.SUMMARY_BLOCK_ID) as EPISODE_SEQUENCE
	, TRANSPLANT_INFO.TXP_CALC_ADMIT_DATE          as INDEX_ADMISSION_DATE
	, TRANSPLANT_INFO.TX_SURG_DT                   as DONATION_DATE
	, TRANSPLANT_INFO.TXP_CALC_DISCHRG_DT          as INDEX_DISCHARGE_DATE
	, TRANSPLANT_INFO.TXP_CALC_RFL_DATE            as REFERRAL_DATE
	, TRANSPLANT_INFO.TXP_CALC_EVAL_DATE           as EVAL_START_DATE
	, TRANSPLANT_INFO.TXP_CALC_EVAL_END_DT         as EVAL_END_DATE
	, TRANSPLANT_INFO.TX_WAITLIST_DT               as WAITLIST_DATE
	, ZC_TX_CURRENT_STAG.NAME                      as CURRENT_PHASE
	, TRANSPLANT_INFO.TX_CURRENT_STAGE_DT          as CURRENT_PHASE_DATE
	, ZC_TX_STAT_OUT.NAME                          as CURRENT_STATUS
	, ZC_TX_CURRENT_REAS.NAME                      as CURRENT_PHASE_REASON
	from
		PATIENT
		inner join IDENTITY_ID
			on PATIENT.PAT_ID = IDENTITY_ID.PAT_ID
		inner join TRANSPLANT_INFO
			on TRANSPLANT_INFO.PAT_ID = IDENTITY_ID.PAT_ID
		inner join TRANSPLANT_CLASS
			on TRANSPLANT_INFO.SUMMARY_BLOCK_ID = TRANSPLANT_CLASS.SUMMARY_BLOCK_ID
		inner join ZC_TX_CLASS
			on TRANSPLANT_CLASS.TX_CLASS_C = ZC_TX_CLASS.TX_CLASS_C
		left join ZC_TX_CURRENT_STAG
			on ZC_TX_CURRENT_STAG.TX_CURRENT_STAG_C = TRANSPLANT_INFO.TX_CURRENT_STAGE_C
		left join ZC_TX_CURRENT_REAS
			on ZC_TX_CURRENT_REAS.TX_CURRENT_REAS_C = TRANSPLANT_INFO.TX_CURRENT_REASON_C
		left join ZC_TX_STAT_OUT
			on ZC_TX_STAT_OUT.TX_STAT_OUT_C = TRANSPLANT_INFO.TX_CURRENT_STATUS_C
	where TRANSPLANT_INFO.EPISODE_STATUS_C <>  3 -- not deleted
		and IDENTITY_ID.IDENTITY_TYPE_ID = 100     -- HUP
		and TRANSPLANT_INFO.TX_EPSD_TYPE_C = 1     -- Donor
		and ZC_TX_CLASS.NAME = 'Kidney'
	)
	select distinct
	  SUMMARY_BLOCK_ID
	, TXP_ORGAN
	, PAT_ID
	, PAT_NAME
	, MRN
	, BIRTH_DATE
	, DEATH_DATE
	, DECEASED_YN
	, EPISODE_SEQUENCE
	, INDEX_ADMISSION_DATE
	, DONATION_DATE
	, INDEX_DISCHARGE_DATE
	, REFERRAL_DATE
	, EVAL_START_DATE
	, EVAL_END_DATE
	, WAITLIST_DATE
	, CURRENT_PHASE
	, CURRENT_PHASE_DATE
	, CURRENT_STATUS
	, CURRENT_PHASE_REASON
	from
		PTS
	order by
		PAT_NAME
	, EPISODE_SEQUENCE
	;

snippet dxods
	select
		OP.MDM_PATIENT_ID,
		MP.EMPI,
		MP.HUP_MRN,
		MP.PMC_MRN,
		MP.PAH_MRN,
		MP.PATIENT_LNAME,
		MP.PATIENT_FNAME,
		E.VISIT_NUMBER_NUM,
		E.ENC_DATE,
		E.ENC_DISCHARGE_DATE,
		D.CODING_DATE,
		C.CODE,
		C.DESCRIPTION
	from
		MDM.PATIENT MP
		inner join ODS.PATIENT OP
			on MP.PK_PATIENT_ID = OP.MDM_PATIENT_ID
			and OP.SOURCE_CODE in ('HDMHUP','HDMPMC','CLINTRAC','EPIC') 
		inner join ODS.ENCOUNTER E
			on OP.PK_PATIENT_ID = E.FK_PATIENT_ID
			and E.SOURCE_CODE in ('HDMHUP','HDMPMC','CLINTRAC','EPIC') 
		inner join ODS.DIAGNOSIS D
			on E.PK_ENCOUNTER_ID = D.FK_ENCOUNTER_ID
			and D.SOURCE_CODE in ('HDMHUP','HDMPMC','CLINTRAC','EPIC') 
		inner join ODS.R_CODES_DIAGNOSIS C
			on C.PK_DX_CODE_ID = D.FK_DX_CODE_ID
			and C.SOURCE_CODE in ('HDMHUP','HDMPMC','CLINTRAC','EPIC') 
	where C.CODE IN (${0:CODES})
	;

snippet dxmdm
	select
		A.MDM_PATIENT_ID,
		E.EMPI,
		E.MRN_HUP,
		E.MRN_PMC,
		E.MRN_PAH,
		E.PATIENT_LNAME,
		E.PATIENT_FNAME,
		E.VISIT_NUMBER,
		E.ENC_DATE,
		E.ENC_DISCHARGE_DATE,
		D.CODING_DATE,
		C.CODE,
		C.CODE_DESCRIPTION
	from
		${1:__TABLE__} A
		inner join MDM.PATIENT_ENCOUNTER E
			on A.EMPI = E.EMPI
		inner join MDM.DIAGNOSIS D
			on E.PK_PATIENT_ENCOUNTER_ID = D.FK_PATIENT_ENCOUNTER_ID
		inner join MDM.R_STANDARD_CODES C
			on C.PK_STANDARD_CODE_ID = D.FK_STANDARD_CODE_ID
	where C.CODE IN (${0:CODES})
	;

snippet dxepicadmitting
	--Hospital Admitting Diagnoses
	select
	  PAT_ENC_HSP.HOSP_ADMSN_TIME
	, PAT_ENC_HSP.HOSP_DISCH_TIME
	, HSP_ACCT_ADMIT_DX.LINE
	, EDG_CURRENT_ICD10.CODE
	, CLARITY_EDG.DX_NAME
	from 
		PAT_ENC_HSP
		inner join HSP_ACCT_ADMIT_DX
			ON PAT_ENC_HSP.HSP_ACCOUNT_ID = HSP_ACCT_ADMIT_DX.HSP_ACCOUNT_ID
		inner join CLARITY_EDG
			ON HSP_ACCT_ADMIT_DX.ADMIT_DX_ID = CLARITY_EDG.DX_ID
		inner join EDG_CURRENT_ICD10
			ON CLARITY_EDG.DX_ID = EDG_CURRENT_ICD10.DX_ID
	where PAT_ENC_HSP.PAT_ENC_CSN_ID in (${0:PAT_ENC_CSN_ID list})
	;

snippet dxepicfinal
	--Hospital Final Diagnoses
	select 
	  PAT_ENC_HSP.HOSP_ADMSN_TIME
	, PAT_ENC_HSP.HOSP_DISCH_TIME
	, HSP_ACCT_DX_LIST.LINE
	, EDG_CURRENT_ICD10.CODE
	, CLARITY_EDG.DX_NAME
	from 
		PAT_ENC_HSP
		inner join HSP_ACCT_DX_LIST
		  ON PAT_ENC_HSP.HSP_ACCOUNT_ID = HSP_ACCT_DX_LIST.HSP_ACCOUNT_ID
		inner join CLARITY_EDG
		  ON HSP_ACCT_DX_LIST.DX_ID = CLARITY_EDG.DX_ID
		inner join EDG_CURRENT_ICD10
		  ON CLARITY_EDG.DX_ID = EDG_CURRENT_ICD10.DX_ID
	where PAT_ENC_HSP.PAT_ENC_CSN_ID in (${0:PAT_ENC_CSN_ID list})
	;

snippet problemlist
	--Hospital Problems
	select
	  PAT_ENC_HSP.HOSP_ADMSN_TIME
	, PAT_ENC_HSP.HOSP_DISCH_TIME
	, PAT_ENC_HOSP_PROB.LINE
	, EDG_CURRENT_ICD10.CODE
	, CLARITY_EDG.DX_NAME
	from PAT_ENC_HSP
		inner join PAT_ENC_HOSP_PROB
		  ON PAT_ENC_HSP.PAT_ENC_CSN_ID = PAT_ENC_HOSP_PROB.PAT_ENC_CSN_ID
		inner join PROBLEM_LIST
		  ON PAT_ENC_HOSP_PROB.PROBLEM_LIST_ID = PROBLEM_LIST.PROBLEM_LIST_ID
		inner join CLARITY_EDG
		  ON PROBLEM_LIST.DX_ID = CLARITY_EDG.DX_ID
		inner join EDG_CURRENT_ICD10
		  ON CLARITY_EDG.DX_ID = EDG_CURRENT_ICD10.DX_ID
	where PAT_ENC_HSP.PAT_ENC_CSN_ID in (${0:PAT_ENC_CSN_ID list})
	;

snippet procods
	select
		OP.MDM_PATIENT_ID,
		MP.EMPI,
		MP.HUP_MRN,
		MP.PMC_MRN,
		MP.PAH_MRN,
		MP.PATIENT_LNAME,
		MP.PATIENT_FNAME,
		E.VISIT_NUMBER_NUM,
		E.ENC_DATE,
		E.ENC_DISCHARGE_DATE,
		P.PROC_DATE,
		C.CODE,
		C.DESCRIPTION
	from
		MDM.PATIENT MP
		inner join ODS.PATIENT OP
			on MP.PK_PATIENT_ID = OP.MDM_PATIENT_ID
			and OP.SOURCE_CODE in ('HDMHUP','HDMPMC','CLINTRAC','EPIC') 
		inner join ODS.ENCOUNTER E
			on OP.PK_PATIENT_ID = E.FK_PATIENT_ID
			and E.SOURCE_CODE in ('HDMHUP','HDMPMC','CLINTRAC','EPIC') 
		inner join ODS.PROCEDURES P
		  on E.PK_ENCOUNTER_ID = P.FK_ENCOUNTER_ID
			and P.SOURCE_CODE in ('HDMHUP','HDMPMC','CLINTRAC','EPIC') 
		inner join ODS.R_CODES_PROCEDURES C
		  on C.PK_PROC_CODE_ID = P.FK_PROC_CODE_ID
			and C.SOURCE_CODE in ('HDMHUP','HDMPMC','CLINTRAC','EPIC') 
	where C.CODE IN (${0:CODES})
	;

snippet procmdm
	select
		A.MDM_PATIENT_ID,
		E.EMPI,
		E.MRN_HUP,
		E.MRN_PMC,
		E.MRN_PAH,
		E.PATIENT_LNAME,
		E.PATIENT_FNAME,
		E.VISIT_NUMBER,
		E.ENC_DATE,
		E.ENC_DISCHARGE_DATE,
		P.PROCEDURE_DATE,
		C.CODE,
		C.CODE_DESCRIPTION
	from
		${1:__TABLE__} A
		inner join MDM.PATIENT_ENCOUNTER E
			on A.EMPI = E.EMPI
		inner join MDM.PROCEDURES P
			on E.PK_PATIENT_ENCOUNTER_ID = P.FK_PATIENT_ENCOUNTER_ID
		inner join MDM.R_STANDARD_CODES C
			on C.PK_STANDARD_CODE_ID = P.FK_STANDARD_CODE_ID
	where C.CODE IN (${0:CODES})
	;

snippet procepic
	select
	  PTS.PAT_ID
	, PTS.PAT_NAME
	, PTS.MRN
	, ORDER_PROC.ORDER_PROC_ID
	, ORDER_PROC.CPT_CODE
	, ORDER_PROC.DESCRIPTION
	, CLARITY_COMPONENT.NAME as RESULT_NAME
	, ORDER_RESULTS.ORD_VALUE
	, ORDER_RESULTS.ORD_NUM_VALUE
	, ORDER_PROC.ORDERING_DATE
	, ORDER_PROC.RESULT_TIME
	, ORDER_RESULTS.RESULT_DATE
	from
		#${0:__table__} PTS
		left join ORDER_PROC
			on ORDER_PROC.PAT_ID = PTS.PAT_ID
		left join ORDER_RESULTS
			ON ORDER_PROC.ORDER_PROC_ID = ORDER_RESULTS.ORDER_PROC_ID
		left join CLARITY_COMPONENT
			ON ORDER_RESULTS.COMPONENT_ID = CLARITY_COMPONENT.COMPONENT_ID
	;

snippet flowods
	with PTS as
	(
	select /*+ PARALLEL(8) */
		MP.PATIENT_LNAME
	, MP.PATIENT_FNAME
	, MP.HUP_MRN
	, MP.PMC_MRN
	, MP.PAH_MRN
	, OP.MDM_PATIENT_ID
	, OP.PK_PATIENT_ID
	, OP.SOURCE_CODE
	from
		${0:__table__} PTS
		inner join MDM.PATIENT MP
			on MP.HUP_MRN = PTS.MRN
		inner join ODS.PATIENT OP
			on OP.MDM_PATIENT_ID = MP.PK_PATIENT_ID
	),
	ENC as
	(
	select /*+ PARALLEL(8) */
	, PTS.MDM_PATIENT_ID
	, E.PK_ENCOUNTER_ID
	, E.VISIT_NUMBER_NUM
	, E.VISIT_NUMBER
	, E.ENC_DATE
	, E.ENC_DISCHARGE_DATE
	, E.SOURCE_CODE
	from
		PTS
		inner join ODS.ENCOUNTER E
			on PTS.PK_PATIENT_ID = E.FK_PATIENT_ID
			and E.SOURCE_CODE = PTS.SOURCE_CODE
	),
	FLOW as
	(
	select /*+ PARALLEL(8) */
		PF.PK_PATIENT_FLOW_ID,
		E.PK_ENCOUNTER_ID,
		E.VISIT_NUMBER,
		E.VISIT_NUMBER_NUM,
		RL.LOCATION_CODE,
		UB.DEPARTMENT,
		UB.UNIT,
		UB.ROOM,
		UB.BED,
		PFT.PATIENT_FLOW_TYPE_DESCRIPTION,
		E.ENC_DATE,
		PF.PATIENT_FLOW_DATE AS IN_DATE,
		CASE
			WHEN MIN (SUB_PF.PATIENT_FLOW_DATE) IS NULL
			THEN E.ENC_DISCHARGE_DATE
			ELSE MIN (SUB_PF.PATIENT_FLOW_DATE)
		END AS OUT_DATE,
		E.ENC_DISCHARGE_DATE,
		CASE
			WHEN MIN (SUB_PF.PATIENT_FLOW_DATE) IS NULL
			THEN ROUND ((E.ENC_DISCHARGE_DATE        - PF.PATIENT_FLOW_DATE),1)
			ELSE MAX (ROUND(SUB_PF.PATIENT_FLOW_DATE - PF.PATIENT_FLOW_DATE,1))
		END AS LOS_DAYS,
		CASE
			WHEN MIN (SUB_PF.PATIENT_FLOW_DATE) IS NULL
			THEN ROUND ((E.ENC_DISCHARGE_DATE         - PF.PATIENT_FLOW_DATE)*24,2)
			ELSE MAX (ROUND((SUB_PF.PATIENT_FLOW_DATE - PF.PATIENT_FLOW_DATE)*24,2))
		END AS LOS_HOURS,
		PF.SOURCE_CODE
	from
		ENC
		inner join ODS.ENCOUNTER E
			on E.PK_ENCOUNTER_ID = ENC.PK_ENCOUNTER_ID
		inner join ODS.PATIENT_FLOW PF
			on E.PK_ENCOUNTER_ID = PF.FK_ENCOUNTER_ID
		left join ODS.PATIENT_FLOW SUB_PF
			on PF.FK_ENCOUNTER_ID        = SUB_PF.FK_ENCOUNTER_ID
			and SUB_PF.PATIENT_FLOW_DATE > PF.PATIENT_FLOW_DATE
			and PF.SOURCE_CODE           = SUB_PF.SOURCE_CODE
		inner join ODS.R_LOCATION RL
			on PF.FK_LOCATION_ID = RL.PK_LOCATION_ID
		inner join ODS.R_UNIT_BED UB
			on PF.FK_UNIT_BED_ID = UB.PK_UNIT_BED_ID
		inner join ODS.R_PATIENT_FLOW_TYPE PFT
			on PFT.PK_PATIENT_FLOW_TYPE_ID = PF.FK_PATIENT_FLOW_TYPE_ID
	where E.SOURCE_CODE       IN ('SCM','EPIC')
		and PF.SOURCE_CODE      IN ('SCM','EPIC')
		and RL.SOURCE_CODE      IN ('SCM','EPIC')
		and UB.SOURCE_CODE      IN ('SCM','EPIC')
		and PFT.SOURCE_CODE     IN ('SCM','EPIC')
	group by
		PF.PK_PATIENT_FLOW_ID,
		E.PK_ENCOUNTER_ID,
		RL.LOCATION_CODE,
		UB.DEPARTMENT,
		UB.UNIT,
		UB.ROOM,
		UB.BED,
		PFT.PATIENT_FLOW_TYPE_DESCRIPTION,
		E.ENC_DATE,
		PF.PATIENT_FLOW_DATE,
		E.ENC_DISCHARGE_DATE,
		PF.SOURCE_CODE
	)
	select
		PTS.PATIENT_LNAME
	, PTS.PATIENT_FNAME
	, PTS.HUP_MRN
	, PTS.PMC_MRN
	, PTS.PAH_MRN
	, PTS.MDM_PATIENT_ID
	, FLOW.PK_ENCOUNTER_ID
	, FLOW.VISIT_NUMBER
	, FLOW.VISIT_NUMBER_NUM
	, FLOW.LOCATION_CODE
	, FLOW.DEPARTMENT
	, FLOW.UNIT
	, FLOW.ROOM
	, FLOW.BED
	, FLOW.PATIENT_FLOW_TYPE_DESCRIPTION
	, FLOW.ENC_DATE
	, FLOW.IN_DATE
	, FLOW.OUT_DATE
	, FLOW.ENC_DISCHARGE_DATE
	, FLOW.LOS_DAYS
	, FLOW.LOS_HOURS
	, FLOW.SOURCE_CODE
	from
	  PTS
		inner join ENC
		  on ENC.MDM_PATIENT_ID = PTS.MDM_PATIENT_ID
		inner join FLOW
		  on FLOW.PK_ENCOUNTER_ID = ENC.PK_ENCOUNTER_ID
	;

snippet labsods
	with PTS as
	(
	select /*+ PARALLEL(8) */
		MP.PATIENT_LNAME
	, MP.PATIENT_FNAME
	, MP.HUP_MRN
	, MP.PMC_MRN
	, MP.PAH_MRN
	, OP.MDM_PATIENT_ID
	, OP.PK_PATIENT_ID
	, OP.SOURCE_CODE
	from
		${0:__table__} PTS
		inner join MDM.PATIENT MP
			on MP.HUP_MRN = PTS.MRN
		inner join ODS.PATIENT OP
			on OP.MDM_PATIENT_ID = MP.PK_PATIENT_ID
	),
	ENC_SCM as
	(
	select /*+ PARALLEL(8) */
		PTS.PATIENT_LNAME
	, PTS.PATIENT_FNAME
	, PTS.HUP_MRN
	, PTS.PMC_MRN
	, PTS.PAH_MRN
	, PTS.MDM_PATIENT_ID
	, E.PK_ENCOUNTER_ID
	, E.VISIT_NUMBER_NUM
	, E.ENC_DATE
	, E.ENC_DISCHARGE_DATE
	, E.SOURCE_CODE
	from
		PTS
		inner join ODS.ENCOUNTER E
			on PTS.PK_PATIENT_ID = E.FK_PATIENT_ID
			and E.SOURCE_CODE = PTS.SOURCE_CODE
	where E.ENC_DATE < to_date('05/18/2008','mm/dd/yyyy')
		and PTS.SOURCE_CODE = 'SCM'
	),
	ENC_CERNER as
	(
	select /*+ PARALLEL(8) */
		PTS.PATIENT_LNAME
	, PTS.PATIENT_FNAME
	, PTS.HUP_MRN
	, PTS.PMC_MRN
	, PTS.PAH_MRN
	, PTS.MDM_PATIENT_ID
	, E.PK_ENCOUNTER_ID
	, E.VISIT_NUMBER_NUM
	, E.ENC_DATE
	, E.ENC_DISCHARGE_DATE
	, E.SOURCE_CODE
	from
		PTS
		inner join ODS.ENCOUNTER E
			on PTS.PK_PATIENT_ID = E.FK_PATIENT_ID
			and E.SOURCE_CODE = PTS.SOURCE_CODE
	where E.ENC_DATE >= to_date('05/18/2008','mm/dd/yyyy')
		and PTS.SOURCE_CODE = 'CERNER'
	),
	ENC_EPIC as
	(
	select /*+ PARALLEL(8) */
		PTS.PATIENT_LNAME
	, PTS.PATIENT_FNAME
	, PTS.HUP_MRN
	, PTS.PMC_MRN
	, PTS.PAH_MRN
	, PTS.MDM_PATIENT_ID
	, E.PK_ENCOUNTER_ID
	, E.VISIT_NUMBER_NUM
	, E.ENC_DATE
	, E.ENC_DISCHARGE_DATE
	, E.SOURCE_CODE
	from
		PTS
		inner join ODS.ENCOUNTER E
			on PTS.PK_PATIENT_ID = E.FK_PATIENT_ID
			and E.SOURCE_CODE = PTS.SOURCE_CODE
	where E.VISIT_NUMBER_NUM not in (select VISIT_NUMBER_NUM from ENC_SCM)
		and E.VISIT_NUMBER_NUM not in (select VISIT_NUMBER_NUM from ENC_CERNER)
		and PTS.SOURCE_CODE = 'EPIC'
	),
	ENC as
	(
	select * from ENC_SCM
	union
	select * from ENC_CERNER
	union
	select * from ENC_EPIC
	)
	select /*+ PARALLEL(8) */
		ENC.PATIENT_LNAME
	, ENC.PATIENT_FNAME
	, ENC.HUP_MRN
	, ENC.PMC_MRN
	, ENC.PAH_MRN
	, ENC.MDM_PATIENT_ID
	, ENC.SOURCE_CODE
	, ENC.VISIT_NUMBER_NUM
	, ENC.ENC_DATE
	, ENC.ENC_DISCHARGE_DATE
	, O.ORDER_DATE
	, O.ORDER_NAME
	, OI.PK_ORDER_ITEM_ID
	, OI.ORDER_ITEM_CODE
	, OI.ORDER_ITEM_DESCRIPTION
	, I.PK_RESULT_ITEM_ID
	, I.RESULT_ITEM_CODE
	, I.RESULT_ITEM_DESCRIPTION
	, I.LOINC_CODE
	, R.RESULT_DATE
	, R.RESULT_VALUE
	, R.RESULT_VALUE_NUM
	, R.RESULT_STATUS
	from
		ENC
		inner join ODS.ORDERS O
			on ENC.PK_ENCOUNTER_ID = O.FK_ENCOUNTER_ID
			and O.SOURCE_CODE = ENC.SOURCE_CODE
		inner join ODS.R_ORDER_ITEM OI
			on OI.PK_ORDER_ITEM_ID = O.FK_ORDER_ITEM_ID
			and OI.SOURCE_CODE = ENC.SOURCE_CODE
		inner join ODS.ORDER_RESULT R
			on O.PK_ORDER_ID = R.FK_ORDER_ID
			and R.SOURCE_CODE = ENC.SOURCE_CODE
		inner join ODS.R_RESULT_ITEM I
			on I.PK_RESULT_ITEM_ID = R.FK_RESULT_ITEM_ID
			and I.SOURCE_CODE = ENC.SOURCE_CODE
	;

snippet labsepic
	with PTS as
	(
	select
		SUMMARY_BLOCK_ID
	, TXP_ORGAN
	, PAT_ID
	, PAT_NAME
	, MRN
	, TRANSPLANT_DATE
	from
		__table__
	)
	select
		PTS.TXP_ORGAN
	, PTS.MRN
	, PTS.PAT_NAME
	, PTS.TRANSPLANT_DATE
	, CLARITY_COMPONENT.NAME
	, CLARITY_COMPONENT.BASE_NAME
	, CLARITY_COMPONENT.COMMON_NAME
	, CLARITY_COMPONENT.LOINC_CODE
	, ORDER_PROC.ORDER_TIME
	, ORDER_PROC.RESULT_TIME
	, ORDER_RESULTS.ORD_VALUE
	, ORDER_RESULTS.REFERENCE_UNIT
	, ORDER_RESULTS.ORD_NUM_VALUE
	from
		PTS
		inner join ORDER_PROC
			on ORDER_PROC.PAT_ID = PTS.PAT_ID
		inner join ORDER_RESULTS
			on ORDER_RESULTS.ORDER_PROC_ID = ORDER_PROC.ORDER_PROC_ID
		inner join CLARITY_COMPONENT
			on CLARITY_COMPONENT.COMPONENT_ID = ORDER_RESULTS.COMPONENT_ID
	;


snippet patholepic
	with PTS as
	(
	select
		SUMMARY_BLOCK_ID
	, TXP_ORGAN
	, PAT_ID
	, PAT_NAME
	, MRN
	, TRANSPLANT_DATE
	from
		__table__
	)
	select
		PTS.PAT_NAME
	, PTS.MRN
	, ORDER_PROC.ORDER_PROC_ID
	, ORDER_PROC.PROC_CODE
	, ORDER_PROC.ORDER_INST
	, ORDER_PROC.RESULT_TIME
	, ORDER_PROC.PAT_ENC_CSN_ID
	, CLARITY_COMPONENT.COMPONENT_ID
	, CLARITY_COMPONENT.NAME as RESULT_COMPONENT
	, ORDER_RES_COMP_CMT.LINE_COMMENT as RESULT_LINE
	, ORDER_RES_COMP_CMT.RESULTS_COMP_CMT as RESULT_COMMENT
	from 
		PTS
		inner join ORDER_PROC
			on ORDER_PROC.PAT_ID = PTS.PAT_ID
		inner join ORDER_STATUS
			ON ORDER_PROC.ORDER_PROC_ID = ORDER_STATUS.ORDER_ID
		inner join ORDER_RESULTS
			ON ORDER_PROC.ORDER_PROC_ID = ORDER_RESULTS.ORDER_PROC_ID
		inner join CLARITY_COMPONENT
			ON ORDER_RESULTS.COMPONENT_ID = CLARITY_COMPONENT.COMPONENT_ID
		left join ORDER_RES_COMP_CMT
			ON ORDER_STATUS.ORDER_ID = ORDER_RES_COMP_CMT.ORDER_ID
			AND ORDER_STATUS.ORD_DATE_REAL = ORDER_RES_COMP_CMT.CONTACT_DATE_REAL
			AND ORDER_RESULTS.LINE = ORDER_RES_COMP_CMT.LINE_COMP
	where ORDER_PROC.PROC_CODE = __CODE__
		and CLARITY_COMPONENT.NAME = 'FINAL DIAGNOSIS' -- This is the text that appears in Hyperspace
	;

snippet imaging
	select
		PTS.PAT_ID
	, PTS.PAT_NAME
	, ORDER_PROC.ORDER_PROC_ID
	, ORDER_PROC.CPT_CODE
	, ORDER_PROC.DESCRIPTION
	, ORDER_PROC.ORDER_TIME  as ORDERING_TIME
	, ORDER_PROC.RESULT_TIME as RESULT_TIME
	, V_IMG_STUDY.ACCESSION_NUM
	, V_IMG_STUDY.STUDY_STATUS_C
	, V_IMG_STUDY.END_EXAM_DTTM as PERFORMED_TIME
	, V_IMG_STUDY.PRELIM_DTTM   as FIRST_READ_TIME
	, HNO_NOTE_TEXT.LINE
	, HNO_NOTE_TEXT.CONTACT_DATE
	, HNO_NOTE_TEXT.NOTE_TEXT
	from
		PATIENT PTS
		inner join ORDER_PROC
			on ORDER_PROC.PAT_ID = PTS.PAT_ID
		left join V_IMG_STUDY
			on V_IMG_STUDY.ORDER_ID = ORDER_PROC.ORDER_PROC_ID
		left join HNO_NOTE_TEXT
			on HNO_NOTE_TEXT.NOTE_CSN_ID = V_IMG_STUDY.RESULT_NOTE_CSN
	where ORDER_PROC.CPT_CODE in (${0:CODES})
		and ORDER_PROC.ORDER_STATUS_C <> 4
	;

snippet surgods
	select
		OP.MDM_PATIENT_ID,
		MP.EMPI,
		MP.HUP_MRN,
		MP.PMC_MRN,
		MP.PAH_MRN,
		MP.PATIENT_LNAME,
		MP.PATIENT_FNAME,
		E.VISIT_NUMBER_NUM,
		E.ENC_DATE,
		E.ENC_DISCHARGE_DATE,
		S.SURGERY_DATE,
		C.CODE,
		C.DESCRIPTION
	from
		MDM.PATIENT MP
		inner join ODS.PATIENT OP
			on MP.PK_PATIENT_ID = OP.MDM_PATIENT_ID
			and OP.SOURCE_CODE = 'EPIC'
		inner join ODS.ENCOUNTER E
			on OP.PK_PATIENT_ID = E.FK_PATIENT_ID
			and E.SOURCE_CODE = 'EPIC'
		inner join ODS.SURGERY S
			on E.PK_ENCOUNTER_ID = S.FK_ENCOUNTER_ID
			and S.SOURCE_CODE = 'EPIC'
		inner join ODS.SURGERY_PROCEDURE P
			on S.PK_SURGERY_ID = P.FK_SURGERY_ID
			and P.SOURCE_CODE = 'EPIC'
		inner join ODS.R_CODES_PROCEDURES C
			on C.PK_PROC_CODE_ID = P.FK_PROC_CODE_ID
			and C.SOURCE_CODE = 'EPIC'
	where trim(C.CODE) in (${0:CODES})
		and S.SURGERY_DATE >= to_date('02/14/2013','MM/DD/YYYY')
	;

snippet surgepic
	SELECT TOP 100
		OR_LOG.LOG_ID,
		OR_LOG.PAT_ID,
		OR_LOG.SURGERY_DATE,
		OR_PROC.OR_PROC_ID,
		OR_PROC_CPT_ID.REAL_CPT_CODE CPT,
		OR_PROC.PROC_NAME
	FROM
		PATIENT
		INNER JOIN IDENTITY_ID
			on IDENTITY_ID.PAT_ID = PATIENT.PAT_ID
		INNER JOIN OR_LOG
			ON PATIENT.PAT_ID = OR_LOG.PAT_ID
		INNER JOIN OR_LOG_ALL_PROC
			ON OR_LOG.LOG_ID = OR_LOG_ALL_PROC.LOG_ID
		INNER JOIN OR_PROC
			ON OR_LOG_ALL_PROC.OR_PROC_ID = OR_PROC.OR_PROC_ID
		INNER JOIN OR_PROC_CPT_ID
			ON OR_PROC.OR_PROC_ID = OR_PROC_CPT_ID.OR_PROC_ID
	WHERE OR_LOG.STATUS_C IN (2,5) --Posted or Complete
		AND OR_LOG.PROC_NOT_PERF_C IS NULL --Proc was peformed
		and IDENTITY_ID.IDENTITY_ID = '045896438'
		and OR_LOG.SURGERY_DATE between '12/01/2016 00:00:00' and '01/01/2017 00:00:00'
	;

snippet surgeon
	with PTS as
	(
	select
		SUMMARY_BLOCK_ID
	, TXP_ORGAN
	, PAT_ID
	, PAT_NAME
	, MRN
	, TRANSPLANT_DATE
	from
		__table__
	)
	select
		PTS.PAT_NAME
	, PTS.MRN

snippet pcp
	with RECIPIENTS as
	(
	select
		PATIENT.PAT_ID
	, PATIENT.PAT_NAME
	, IDENTITY_ID.IDENTITY_ID as MRN
	, TRANSPLANT_INFO.SUMMARY_BLOCK_ID
	, PATIENT.BIRTH_DATE
	, PATIENT.DEATH_DATE
	, ZC_TX_CLASS.NAME as TXP_ORGAN
	, case
			when PATIENT.PAT_STATUS_C = 1 or (PATIENT.PAT_STATUS_C is null and PATIENT.DEATH_DATE is null)
			then 0
			when PATIENT.PAT_STATUS_C = 2 or (PATIENT.PAT_STATUS_C is null and PATIENT.DEATH_DATE is not null)
			then 1
		end as DECEASED_YN
	, dense_rank() over (partition by IDENTITY_ID.IDENTITY_ID
			order by TRANSPLANT_INFO.SUMMARY_BLOCK_ID) as EPISODE_SEQUENCE
	, TRANSPLANT_INFO.TX_SURG_DT                   as TRANSPLANT_DATE
	, TRANSPLANT_INFO.TXP_CALC_RFL_DATE            as REFERRAL_DATE
	, TRANSPLANT_INFO.TXP_CALC_EVAL_DATE           as EVAL_START_DATE
	, TRANSPLANT_INFO.TXP_CALC_EVAL_END_DT         as EVAL_END_DATE
	, TRANSPLANT_INFO.TX_WAITLIST_DT               as WAITLIST_DATE
	, ZC_TX_CURRENT_STAG.NAME                      as CURRENT_PHASE
	, TRANSPLANT_INFO.TX_CURRENT_STAGE_DT          as CURRENT_PHASE_DATE
	, ZC_TX_STAT_OUT.NAME                          as CURRENT_STATUS
	, ZC_TX_CURRENT_REAS.NAME                      as CURRENT_PHASE_REASON
	from
		PATIENT
		inner join IDENTITY_ID
			on PATIENT.PAT_ID = IDENTITY_ID.PAT_ID
		inner join TRANSPLANT_INFO
			on TRANSPLANT_INFO.PAT_ID = IDENTITY_ID.PAT_ID
		inner join TRANSPLANT_CLASS
			on TRANSPLANT_INFO.SUMMARY_BLOCK_ID = TRANSPLANT_CLASS.SUMMARY_BLOCK_ID
		inner join ZC_TX_CLASS
			on TRANSPLANT_CLASS.TX_CLASS_C = ZC_TX_CLASS.TX_CLASS_C
		left join ZC_TX_CURRENT_STAG
			on ZC_TX_CURRENT_STAG.TX_CURRENT_STAG_C = TRANSPLANT_INFO.TX_CURRENT_STAGE_C
		left join ZC_TX_CURRENT_REAS
			on ZC_TX_CURRENT_REAS.TX_CURRENT_REAS_C = TRANSPLANT_INFO.TX_CURRENT_REASON_C
		left join ZC_TX_STAT_OUT
			on ZC_TX_STAT_OUT.TX_STAT_OUT_C = TRANSPLANT_INFO.TX_CURRENT_STATUS_C
	where TRANSPLANT_INFO.EPISODE_STATUS_C <>  3 -- not deleted
		and IDENTITY_ID.IDENTITY_TYPE_ID = 100     -- HUP
		and TRANSPLANT_INFO.TX_EPSD_TYPE_C = 2     -- Recipient
	)
	select distinct
		RECIPIENTS.PAT_ID
	, RECIPIENTS.PAT_NAME
	, RECIPIENTS.MRN
	, RECIPIENTS.CURRENT_PHASE
	, CLARITY_SER.PROV_ID
	, CLARITY_SER.PROV_NAME
	, CLARITY_SER.PROV_ROLE
	, PAT_PCP.*
	from
		RECIPIENTS
		inner join PAT_PCP
			on PAT_PCP.PAT_ID = RECIPIENTS.PAT_ID
			and PAT_PCP.DELETED_YN = 'N'
			and PAT_PCP.TERM_DATE is null
		inner join CLARITY_SER
			on CLARITY_SER.PROV_ID = PAT_PCP.PCP_PROV_ID
	order by RECIPIENTS.PAT_NAME, CLARITY_SER.PROV_NAME
	;

snippet drop
	if object_id('tempdb..${0:#_table_}') is not null begin drop table #_table_ end;

snippet compare
	select distinct
		A.MDM_PATIENT_ID,
		B.MDM_PATIENT_ID
	from
		${0:__TABLE1__} A
		full outer join ${1:__TABLE2__} B
		  on A.MDM_PATIENT_ID = B.MDM_PATIENT_ID
	order by 1,2
	;

snippet medepic
	select TOP 100
		ORDER_MED.PAT_ID
	, ORDER_MED.MEDICATION_ID
	, ORDER_MED.ORDER_MED_ID 
	, ORDER_MED.AUTHRZING_PROV_ID
	, CLARITY_SER.PROV_NAME AUTHORIZING_PROVIDER
	, ORDER_MED.START_DATE
	, ORDER_MED.END_DATE
	, ORDER_MED.ORDERING_DATE
	, CLARITY_MEDICATION.NAME MEDICATION_NAME
	, CLARITY_MEDICATION.GENERIC_NAME
	, ZC_ORDER_CLASS.NAME ORDER_CLASS --historical, normal, etc.
	, ZC_ORDERING_MODE.NAME ORDERING_MODE --outpatient, inpatient
	from
		ORDER_MED
		inner join CLARITY_SER
			on ORDER_MED.AUTHRZING_PROV_ID = CLARITY_SER.PROV_ID
		inner join CLARITY_MEDICATION
			on ORDER_MED.MEDICATION_ID = CLARITY_MEDICATION.MEDICATION_ID
			and ORDER_MED.ORDERING_MODE_C = 1 --outpatient, inpatient = 2
		left join ZC_ORDER_STATUS
			on ORDER_MED.ORDER_STATUS_C = ZC_ORDER_STATUS.ORDER_STATUS_C
		left join ZC_ORDER_CLASS
			on ORDER_MED.ORDER_CLASS_C = ZC_ORDER_CLASS.ORDER_CLASS_C
		left join ZC_ORDERING_MODE
			on ORDER_MED.ORDERING_MODE_C = ZC_ORDERING_MODE.ORDERING_MODE_C
	where ORDER_MED.IS_PENDING_ORD_YN is null --filter out pending orders
		and (ORDER_MED.ORDER_STATUS_C is null or ORDER_MED.ORDER_STATUS_C <> 4) --filter out canceled orders
	;

snippet organfailure
	with PTS as
	(
	select
		PATIENT.PAT_ID
	, PATIENT.PAT_NAME
	, IDENTITY_ID.IDENTITY_ID as MRN
	, TRANSPLANT_INFO.SUMMARY_BLOCK_ID
	, ZC_TX_CLASS.NAME as TXP_ORGAN
	, dense_rank() over (partition by IDENTITY_ID.IDENTITY_ID
			order by TRANSPLANT_INFO.SUMMARY_BLOCK_ID) as EPISODE_SEQUENCE
	, ZC_TX_CURRENT_STAG.NAME                      as CURRENT_PHASE
	, TRANSPLANT_INFO.TX_CURRENT_STAGE_DT          as CURRENT_PHASE_DATE
	, ZC_TX_STAT_OUT.NAME                          as CURRENT_STATUS
	, TRANSPLANT_CLASS.TX_CLASS_C
	from
		PATIENT
		inner join IDENTITY_ID
			on PATIENT.PAT_ID = IDENTITY_ID.PAT_ID
		inner join TRANSPLANT_INFO
			on TRANSPLANT_INFO.PAT_ID = IDENTITY_ID.PAT_ID
		inner join TRANSPLANT_CLASS
			on TRANSPLANT_INFO.SUMMARY_BLOCK_ID = TRANSPLANT_CLASS.SUMMARY_BLOCK_ID
		inner join ZC_TX_CLASS
			on TRANSPLANT_CLASS.TX_CLASS_C = ZC_TX_CLASS.TX_CLASS_C
		left join ZC_TX_CURRENT_STAG
			on ZC_TX_CURRENT_STAG.TX_CURRENT_STAG_C = TRANSPLANT_INFO.TX_CURRENT_STAGE_C
		left join ZC_TX_STAT_OUT
			on ZC_TX_STAT_OUT.TX_STAT_OUT_C = TRANSPLANT_INFO.TX_CURRENT_STATUS_C
	where TRANSPLANT_INFO.EPISODE_STATUS_C <>  3 -- not deleted
		and IDENTITY_ID.IDENTITY_TYPE_ID = 100     -- HUP
		and TRANSPLANT_INFO.TX_EPSD_TYPE_C = 2     -- Recipient
	)
	select distinct
		PTS.PAT_NAME
	, PTS.MRN
	, PTS.PAT_ID
	, PTS.SUMMARY_BLOCK_ID
	, PTS.EPISODE_SEQUENCE
	, PTS.CURRENT_PHASE_DATE
	, PTS.CURRENT_PHASE
	, PTS.CURRENT_STATUS
	, PTS.TXP_ORGAN
	, ZC_NATV_PRIM_FAIL.NAME as FAILURE_REASON
	from
		PTS
		left join PAT_NATIVE_ORG
			on PAT_NATIVE_ORG.PAT_ID = PTS.PAT_ID
		left join ORGAN
			on ORGAN.ORG_RECORD_ID = PAT_NATIVE_ORG.ORG_RECORD_ID
			and PTS.TX_CLASS_C = ORGAN.ORGAN_CLASS_C
		left join ZC_NATV_PRIM_FAIL
			on ZC_NATV_PRIM_FAIL.NAT_PRIMARY_FAIL_C = ORGAN.NAT_PRIMARY_FAIL_C
	;

snippet header
	/*
	 * Requester:   ${0:NAME}
	 * Title:       
	 * Ticket:      
	 *
	 * Author:      Peter Martinson
	 * Open Date:   
	 * Close Date:  
	 *              
	*/

	/*============================== DESCRIPTION ===================================


	/*============================================================================*/

snippet crystal
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	--
	/* REPORT CREATION
	Name: ${0:NAME}
	Date: 
	Author: Peter Martinson
	Requestor: 
	Ticket: 
	Description: 
	Variables: 
	Parameters: none
	Frequency: Monthly
	Number of Records: 
	Runtime: 
	Shared Drive Location: I:\Athena\Report Requests\martinson\
	BOE Location: \PennChart\Transplant\
	*/

snippet crysthist
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	--
	/*HISTORY
	Name: ${0:NAME}
	Date: 
	Ticket: 
	Requestor: 
	PoC: Peter Martinson
	Modified By: 
	Description: 
	Variables: 
	Parameters: none
	Frequency: Monthly
	Number of Records: 
	Runtime: 
	Shared Drive Location: I:\Athena\Report Requests\martinson\
	BOE Location: \PennChart\Transplant\
	*/
